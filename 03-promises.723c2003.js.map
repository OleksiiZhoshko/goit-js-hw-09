{"mappings":"gfAoDA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACHH,EACAF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAExBA,E,IA1CIQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGD,SAAPC,GAEaA,EAArBC,iBAEyB,IAAGC,EAAAF,EAAIG,OAAOC,SAAnCC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEfC,EAAYR,EAAIG,OAAOM,iBAEzBC,EAAYC,OAAON,EAAMO,OAEbJ,EAANK,UAAW,EACrB,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAOK,MAAOE,GAAK,EAEb3B,EAAT2B,EAAGJ,GACZK,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACfJ,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEhE+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAChBJ,EAAAgC,OAAOI,QAAQ,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEpEqB,GAAaC,OAAOL,EAAKM,OAG7BhB,YAAW,WACPY,EAAUK,UAAW,C,GACtBH,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const formRef = document.querySelector('form');\n\n// formRef.addEventListener('submit', onSubmitForm);\n\n// function onSubmitForm(e) {\n//   e.preventDefault();\n\n//   const { delay, amount, step } = e.target.elements;\n\n//   let delayValue = Number(delay.value);\n//   for (let i = 0; i < amount.value; i += 1) {\n//     createPromise(i, delayValue)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n//           opacity: 0.8,\n//           timeout: 500,\n//           cssAnimationDuration: 500,\n//           backOverlay: true,\n//           backOverlayColor: 'rgba(50,198,130,0.2)',\n//         });\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n//           opacity: 0.8,\n//           timeout: 500,\n//           backOverlay: true,\n//           cssAnimationDuration: 500,\n//           backOverlayColor: 'rgba(255,85,73,0.2)',\n//         });\n//       });\n//     delayValue += Number(step.value);\n//   }\n//   e.target.reset();\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// Переробляю ДЗ працюю по методичці з заннятя\n// підключаєм бібліотеку\nimport { Notify } from 'notiflix';\n\n// отримуємо доступ до форми\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onForm);\n\n// функція опрацювання форми\nfunction onForm(evt) {\n// відключаємо відправку форми\n    evt.preventDefault();\n// деструктиризуємо елементи форми \n    const { delay, step, amount } = evt.target.elements;\n    // достукуємось до кнопки\n    const submitBtn = evt.target.lastElementChild;\n    // присвоєння значення делей\n    let deleyTime = Number(delay.value)\n// дісейблемо кнопку\n    submitBtn.disabled = true;\n    for (let i = 1; i <= amount.value; i += 1) {\n        // створюємо проміс зен і кетч\n        createPromise(i, deleyTime)\n            .then(({ position, delay }) => {\n                Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n            .catch(({ position, delay }) => {\n                Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n            });  \n        deleyTime += Number(step.value);\n    }\n// робимо кнопку активною по закінчиню циклу\n    setTimeout(() => {\n        submitBtn.disabled = false;\n    }, deleyTime);\n\n};\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve({ position, delay });\n            } else {\n                reject({ position, delay });\n            }\n        }, delay);\n    });\n};"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","target","elements","delay1","step","amount","submitBtn","lastElementChild","deleyTime","Number","value","disabled","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.723c2003.js.map"}