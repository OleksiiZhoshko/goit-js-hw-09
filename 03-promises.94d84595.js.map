{"mappings":"oeAoDA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACHH,EACAF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAEhCA,EAAM,G,CA1CFQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGD,SAAPC,GAEaA,EAArBC,iBAEyB,MAArBZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,OAAOC,SAErCC,EAAYP,EAAIK,OAAOG,iBAEN,IAAnBC,EAAYC,OAAOR,EAAMS,OAEbJ,EAANK,UAAW,EACrB,IAAK,IAAIC,EAAI,EAAGA,GAAKT,EAAOO,MAAOE,GAAK,EAEb1B,EAAT0B,EAAGJ,GACZK,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACfJ,EAAA8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAElE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAChBJ,EAAA8B,OAAOG,QAAQ,sBAAoB9B,QAAiBC,MAAU,IAEtEoB,GAAaC,OAAOP,EAAKQ,OAG7Bf,YAAW,KACPW,EAAUK,UAAW,CAAK,GAC3BH,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const formRef = document.querySelector('form');\n\n// formRef.addEventListener('submit', onSubmitForm);\n\n// function onSubmitForm(e) {\n//   e.preventDefault();\n\n//   const { delay, amount, step } = e.target.elements;\n\n//   let delayValue = Number(delay.value);\n//   for (let i = 0; i < amount.value; i += 1) {\n//     createPromise(i, delayValue)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n//           opacity: 0.8,\n//           timeout: 500,\n//           cssAnimationDuration: 500,\n//           backOverlay: true,\n//           backOverlayColor: 'rgba(50,198,130,0.2)',\n//         });\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n//           opacity: 0.8,\n//           timeout: 500,\n//           backOverlay: true,\n//           cssAnimationDuration: 500,\n//           backOverlayColor: 'rgba(255,85,73,0.2)',\n//         });\n//       });\n//     delayValue += Number(step.value);\n//   }\n//   e.target.reset();\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// Переробляю ДЗ працюю по методичці з заннятя\n// підключаєм бібліотеку\nimport { Notify } from 'notiflix';\n\n// отримуємо доступ до форми\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onForm);\n\n// функція опрацювання форми\nfunction onForm(evt) {\n// відключаємо відправку форми\n    evt.preventDefault();\n// деструктиризуємо елементи форми \n    const { delay, step, amount } = evt.target.elements;\n    // достукуємось до кнопки\n    const submitBtn = evt.target.lastElementChild;\n    // присвоєння значення делей\n    let deleyTime = Number(delay.value)\n// дісейблемо кнопку\n    submitBtn.disabled = true;\n    for (let i = 1; i <= amount.value; i += 1) {\n        // створюємо проміс зен і кетч\n        createPromise(i, deleyTime)\n            .then(({ position, delay }) => {\n                Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n            .catch(({ position, delay }) => {\n                Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n            });  \n        deleyTime += Number(step.value);\n    }\n// робимо кнопку активною по закінчиню циклу\n    setTimeout(() => {\n        submitBtn.disabled = false;\n    }, deleyTime);\n\n};\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve({ position, delay });\n            } else {\n                reject({ position, delay });\n            }\n        }, delay);\n    });\n};"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","step","amount","target","elements","submitBtn","lastElementChild","deleyTime","Number","value","disabled","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.94d84595.js.map"}